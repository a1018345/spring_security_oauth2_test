/*
 * This file is generated by jOOQ.
*/
package lanyao.springsecurity.oauth.domain;


import lanyao.springsecurity.oauth.auditable.BaseAuditable;

import javax.annotation.Generated;
import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Objects;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "user_role", schema = "master_program", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"user_id", "role_id"})
})
public class UserRole extends BaseAuditable implements Serializable {

    private static final long serialVersionUID = -650498686;

    private Integer       id;




    private User user;
    private Role role;




    public UserRole() {}

    public UserRole(UserRole value) {
        this.id = value.id;
    }

    public UserRole(
        Integer       id,
        Integer       insertUserId,
        Integer       lastModifyUserId,
        LocalDateTime lastModifyDate
    ) {
        this.id = id;
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", unique = true, nullable = false, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }



//    =============================

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id")
    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "role_id")
    public Role getRole() {
        return role;
    }

    public void setRole(Role role) {
        this.role = role;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }

        final UserRole other = (UserRole) obj;
        if (!Objects.equals(this.role.getId(), other.getRole().getId())||
                !Objects.equals(this.user.getId(), other.getUser().getId())) {
            return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return Objects.hash(user.getId(), role.getId());
    }
}

